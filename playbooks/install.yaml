---
- name: Setup VPN Client Node
  hosts: vpnClientNodes
  gather_facts: yes
  vars_files:
    - ../vars/localVariables.yaml
  vars:
    Blocks:
        Setup: yes
        FirewallConfiguration: yes
        SynchronizeImages: no
        UpdateImages: yes
        FetchImages: no
        CommitImages: no
        Containers: yes

  handlers:
  - name: Restart SSHD
    systemd: name=sshd state=restarted
  - name: Restart Docker
    systemd: name=docker state=restarted
  tasks:
  - name: Docker Setup
    tags: setup
    when: Blocks.Setup
    block:
        - name: Installing Docker Packages
          loop: [docker]
          yum: name={{item}} state=present
        - name: Installing Docker Packages on localhost
          run_once: yes
          delegate_to: localhost
          connection: local
          become: yes
          become_method: sudo
          become_user: root
          command: "yum -y install {{Docker.Packages|join(' ')}}"
          args:
            warn: no
        - name: Installing Docker Python Packages
          loop: [docker]
          pip: name={{item}} state=present
        - name: Installing Docker Packages on localhost
          run_once: yes
          delegate_to: localhost
          connection: local
          become: yes
          become_method: sudo
          become_user: root
          command: pip install docker --user
          args:
            warn: no
        - name: Starting and Enabling Docker
          service: name=docker state=started enabled=yes
        - name: Configuring Docker to listen on TCP
          register: dr
          lineinfile:
            path: /etc/sysconfig/docker
            regexp: "^OPTIONS="
            line: "OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false -H tcp://{{Docker.API.Host}}:{{Docker.API.Port}} -H unix://{{Docker.API.Socket}}'"
        - name: restart docker
          when: dr is changed
          systemd: name=docker state=restarted
        
  - name: Configure Docker Server Firewalls
    tags: FirewallConfiguation
    when: Blocks.FirewallConfiguration
    block:
        - name: Check if CSF is installed
          register: csfPost
          stat: path=/etc/csf/csfpost.sh
        - name: Checking if CSFPOSTD_PATH is in csfpost.sh
          when: csfPost.stat.exists
          command: grep CSFPOSTD_PATH /etc/csf/csfpost.sh
          ignore_errors: yes
          register: csfPostdPath
        - name: Adding CSFPOSTD_PATH Include Logic to csfpost.sh
          register: csfPostScript
          when: 
            - csfPost.stat.exists
            - csfPostdPath.rc != 0
          blockinfile:
            path: /etc/csf/csfpost.sh
            state: present
            validate: bash -n %s
            block: "{{lookup('file', 'csfPostInclude.sh')}}"
            backup: yes
            insertafter: EOF
        - name: Copying docker.sh csf script
          copy: src=docker.sh dest=/usr/local/include/csf/post.d/docker.sh mode=0700
          register: csfScript
        - name: Restarting CSF
          when: csfPostScript is changed or csfScript is changed
          service: name=csf state=restarted
        - name: Checking CSF List
          when: csfPostScript is changed or csfScript is changed
          command: csf -l

  - name: "Synchronize {{Repos.DockerImages}} Tarballs"
    tags: images
    when: Blocks.SynchronizeImages
    block:
        - name: "Create Remote {{ImageStorageDirectory}}/{{Repos.DockerImages}} directory"
          file: path={{ImageStorageDirectory}}/{{Repos.DockerImages}} state=directory
        - name: debug files
          loop: "{{Docker.Images.keys()}}"
          debug: var=Docker.Images[item].archive
        - name: debug src files
          loop: "{{Docker.Images.keys()}}"
          debug:
            msg: "../dockerImages/{{Repos.DockerImages}}/{{Docker.Images[item].archive}}"
        - name: debug dest files
          loop: "{{Docker.Images.keys()}}"
          debug:
            msg: "{{ImageStorageDirectory}}/{{Repos.DockerImages}}/{{Docker.Images[item].archive}}"
        - name: Copy Image Tarballs
          loop: "{{Docker.Images.keys()}}"
          register: copiedTarballs
          copy: 
            src: "../dockerImages/{{Repos.DockerImages}}/{{Docker.Images[item].archive}}" 
            dest: "{{ImageStorageDirectory}}/{{Repos.DockerImages}}/"
        - name: Import Docker Images
          loop: "{{Docker.Images.keys()}}"
          register: imageImports
          when: 
          - Docker.Images[item].build
          docker_image:
             name: "{{item}}"
             load_path: "{{ImageStorageDirectory}}/{{Repos.DockerImages}}/{{Docker.Images[item].archive}}"
             push: no
             buildargs:
               log_volume: /var/log/myapp
               listen_port: 8080
        - name: Pull Non existent Docker Images
          loop: "{{imageImports.results}}"
          debug: var=item


  - name: Update CentOS Docker Container
    when: Blocks.UpdateImages
    block:
        - name: "Updating Container Images :: Remove Image Containers"
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          docker_container:
            name: "{{item.name}}"
            state: absent
            purge_networks: yes

        - name: "Updating Container Images :: Create CentOS Container Images"
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          docker_container:
            name: "{{item.name}}"
            hostname: "{{item.hostname}}"
            image: "{{item.image}}"
            volumes: "{{item.volumes}}"
            privileged: "{{item.privileged}}"
            capabilities: "{{item.capabilities}}"
            recreate: yes
            detach: yes
            state: started
            pull: no
            auto_remove: no
            cleanup: no

        - name: "Updating Container Images :: Pausing to let Containers start"
          delegate_to: "{{ImageTemplateServer}}"
          loop: "{{Docker.Containers}}"
          run_once: yes
          pause: seconds=2

        - name: "Updating Container Images :: Collecting Container Used Bytes"
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: before_usedBytes
          shell: "docker exec {{item.name}} bash -l -c \"{{item.Commands._UsedBytes}}\""

        - name: Set beforeBytes
          run_once: yes
          set_fact:
            beforeBytes: "{{before_usedBytes.results[0].stdout|int}}"

        - name: Add the newly created container to the inventory
          loop: "{{Docker.Containers}}"
          add_host:
              name: "{{ item.name }}"
              ansible_connection: docker
              ansible_user: root
              ansible_docker_extra_args: "-H=tcp://{{ImageTemplateServer}}:{{Docker.API.Port}}"

        - name: Gather Docker Container Facts
          run_once: yes
          delegate_to: centos
          register: centosFacts
          setup:

        - name: Debug Container Host Facts
          debug: var=centosFacts
          run_once: yes

        - name: Debug Container Host Vars
          debug: var=hostvars['centos']
          run_once: yes

        #- name: Run test command in Docker Container
        #  when: no
        #  run_once: yes
        #  delegate_to: centos
        #  command: ifconfig
        #  register: i
        #- debug: var=i

#        - name: "Updating Container Images :: Ensuring Container is started"
#          delegate_to: "{{ImageTemplateServer}}"
#          run_once: yes
#          loop: "{{Docker.Containers}}"

        - name: "Updating Container Images :: Verifying the Docker container can reach the internet"
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: pingTest
          shell: "docker exec {{item.name}} bash -l -c \"ping -w 1 -c 1 4.2.2.1\""
          ignore_errors: yes

        - name: "Updating Container Images :: Restarting Docker"
          when: pingTest is failed
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          systemd: name=docker state=restarted

        - name: "Updating Container Images :: Verifying the Docker container can reach the internet"
          when: pingTest is failed
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: updateOutput
          shell: "docker exec {{item.name}} bash -l -c \"ping -w 1 -c 1 4.2.2.1\""

        - name: Install the remi and ius repo from remote repo
          run_once: yes
          delegate_to: centos
          yum:
            name:
             - "https://rpms.remirepo.net/enterprise/remi-release-{{ ansible_distribution_major_version }}.rpm"
             - "https://centos{{ ansible_distribution_major_version }}.iuscommunity.org/ius-release.rpm"

        - name: Updating Packages in Docker Container
          run_once: yes
          delegate_to: "{{item.name}}"
          loop: "{{Docker.Containers}}"
          yum: name={{item.Packages.Update}} state=latest

#        - meta: end_play

        - name: "Updating Container Images :: Issue Container Image Update Commands"
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: updateOutput
          shell: "docker exec {{item.name}} bash -l -c \"{{item.Commands._Remove}} {{item.Packages.Absent|join(' ')}} && {{item.Commands._Update}} {{item.Packages.Update|join(' ')}} && {{item.Commands._Install}} {{item.Packages.Present|join(' ')}} && {{item.Commands._Pip_Install}} {{item.Pips.Present|join(' ')}} && {{item.Commands._Npm_Install}} {{item.Npms.Present|join(' ')}}\""

        - name: "Updating Container Images :: Collecting Container Used Bytes"
          delegate_to: "{{ImageTemplateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: after_usedBytes
          shell: "docker exec {{item.name}} bash -l -c \"{{item.Commands._UsedBytes}}\""

        - name: Set afterBytes
          run_once: yes
          set_fact:
            afterBytes: "{{after_usedBytes.results[0].stdout|int}}"

        - name: Set changedBytes
          run_once: yes
          set_fact:
            changedBytes: "{{afterBytes|int - beforeBytes|int}}"

        - name: check changedBytes
          run_once: yes
          debug: var=changedBytes

        - name: Set Update Policy
          run_once: yes
          set_fact:
                updatePolicy: "{{(changedBytes|int > CommitPolicy.MinimumChangedBytes|int) or CommitPolicy.Force}}"

        - name: check Update Policy
          run_once: yes
          debug: var=updatePolicy|bool

        - name: Updating Image Based on Update Policy
          when: updatePolicy|bool
          block:
                - name: "Updating Container Images :: Create Container Image Commit"
                  delegate_to: "{{ImageTemplateServer}}"
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  command: "docker commit centos {{item.image}}:latest"

                - name: "Updating Container Images :: Create Container Image Tarballs"
                  delegate_to: "{{ImageTemplateServer}}"
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  docker_image:
                     name: "{{item.image}}:latest"
                     archive_path: "{{ImageStorageDirectory}}/{{Repos.DockerImages}}/{{Docker.Images[item.imageTarball].archive}}"
                     push: no
                     repository: "{{item.image}}"

                - name: "Updating Container Images :: Fetch Container Image Tarballs"
                  when: Blocks.FetchImages
                  delegate_to: "{{ImageTemplateServer}}"
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  fetch:
                    validate_checksum: no
                    src: "{{ImageStorageDirectory}}/{{Repos.DockerImages}}/{{Docker.Images[item.imageTarball].archive}}"
                    dest: "../dockerImages/{{Repos.DockerImages}}"
                    flat: yes

                - name: "Updating Container Images :: Push Docker Image Tarballs to Repo"
                  when: Blocks.CommitImages
                  delegate_to: localhost
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  shell: "git add {{Docker.Images[item.imageTarball].archive}}; git commit {{Docker.Images[item.imageTarball].archive}} -m 'automatic docker image update from playbook' && git status | grep 'directory clean' || git push"
                  args:
                    chdir: "../dockerImages/{{Repos.DockerImages}}"
        

           
  - name: Create Docker Containers
    tags: containers
    when: Blocks.Containers
    block:
        - name: Create Test CentOS 7 Container
          loop: "{{Docker.Containers}}"
          register: testContainer
          docker_container:
              pull: no
              auto_remove: no
              cleanup: no
              detach: yes
              hostname: "{{item.hostname}}"
              name: "{{item.name}}"
              image: "{{item.image}}"
              state: "{{item.state}}"
              volumes: "{{item.volumes}}"
              privileged: "{{item.privileged}}"
              capabilities: "{{item.capabilities}}"
              ports: "{{item.ports}}"
              recreate: yes
              memory: 512M
              memory_swap: 1024M
              memory_reservation: 512M
        - name: Debug testContainer
          debug: var=testContainer
