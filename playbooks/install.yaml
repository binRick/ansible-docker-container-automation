---
- name: Setup VPN Client Node
  hosts: vpnClientNodes
  gather_facts: yes
  vars:
    Blocks:
        Setup: yes
        Synchronize: no
        Containers: yes
        UpdateImages: no
        Commit: no
    ImageStorageDirectory: /root/dockerImages
    CommitPolicy:
        MinimumChangedBytes: 100000
        Force: yes
    Docker:
        API:
          Host: 127.0.0.1
          Port: 19223
          Socket: /var/run/docker.sock
        ImageTemplateServer: vpn201
        Containers:
          - name: centos
            imageTemplate: yes
            image: centos/systemd
            imageTarball: centos-systemd
            state: started
            hostname: centos-7-test
            privileged: yes
            volumes:
                - /sys/fs/cgroup:/sys/fs/cgroup:ro
                - /dev/net:/dev/net:z
                - /srv/service1:/var/lib/service1:Z
            capabilities:
               - net_admin
            ports:
               - "127.0.0.1:39552:22/tcp"
               - "127.0.0.1:35993:9001/udp"
            Commands:
                _Update: yum -y update
                _Install: yum -y install
                _Pip_Install: pip install --user --upgrade --force
                _Npm_Install: npm i -g
                _Remove: yum -y remove
                _UsedBytes: "df / | tail -n1 | tr -s ' ' | cut -d' ' -f3"
            Npms:
                Present:
                  - speed-test
                  - xterm
                  - js-beautify
                  - nodemon
                  - async
                  - n
            Pips:
                Present:
                  - speedtest-cli
                  - tcconfig
            Packages:
                Update:
                  - '*'
                Present:
                  - epel-release
                  - nmap
                  - httpd
                  - strace
                  - htop
                  - nagios-plugins-ifstatus
                  - unzip
                  - autoconf
                  - psmisc
                  - curl-devel
                  - iproute
                  - iperf
                  - lsof
                  - tmux
                  - iptraf-ng
                  - unbound-libs
                  - python-pip
                  - yum-utils
                  - zsh
                  - socat
                  - ppp
                  - openconnect
                  - vim-enhanced
                  - xl2tpd
                  - expect
                  - mlocate
                  - autoconf
                  - libpcap
                  - fping
                  - ngrep
                  - wget
                  - curl
                  - telnet
                  - nload
                  - openssl
                  - net-tools
                  - git
                  - rsync
                  - md5
                  - python
                  - tcpdump
                  - openvpn
                  - gcc
                  - nmap-ncat
                  - bind-utils
                  - iostat


                Absent:
                  - adcli
        Images:
          centos-systemd:
            archive: centos-systemd.tar
            build: yes
            update: yes
            templateServer: vpn201
            Commit: no


  handlers:
  - name: Restart SSHD
    systemd: name=sshd state=restarted
  - name: Restart Docker
    systemd: name=docker state=restarted
  tasks:
  - name: Docker Setup
    tags: setup
    when: Blocks.Setup
    block:
        - name: Installing Docker Packages
          loop: [docker]
          yum: name={{item}} state=present
        - name: Installing Docker Python Packages
          loop: [docker]
          pip: name={{item}} state=present
        - name: Starting and Enabling Docker
          service: name=docker state=started enabled=yes
        - name: Configuring Docker to listen on TCP
          notify: Restart Docker
          lineinfile:
            path: /etc/sysconfig/docker
            regexp: "^OPTIONS="
            line: "OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false -H tcp://{{Docker.API.Host}}:{{Docker.API.Port}} -H unix://{{Docker.API.Socket}}'"
        - meta: flush_handlers

  - name: Synchronize vpntech-docker-images Tarballs
    tags: images
    when: Blocks.Synchronize
    block:
        - name: "Create Remote {{ImageStorageDirectory}}/vpntech-docker-images directory"
          file: path={{ImageStorageDirectory}}/vpntech-docker-images state=directory
        - name: debug files
          loop: "{{Docker.Images.keys()}}"
          debug: var=Docker.Images[item].archive
        - name: debug src files
          loop: "{{Docker.Images.keys()}}"
          debug:
            msg: "../dockerImages/vpntech-docker-images/{{Docker.Images[item].archive}}"
        - name: debug dest files
          loop: "{{Docker.Images.keys()}}"
          debug:
            msg: "{{ImageStorageDirectory}}/vpntech-docker-images/{{Docker.Images[item].archive}}"
        - name: Copy Image Tarballs
          loop: "{{Docker.Images.keys()}}"
          register: copiedTarballs
          copy: 
            src: "../dockerImages/vpntech-docker-images/{{Docker.Images[item].archive}}" 
            dest: "{{ImageStorageDirectory}}/vpntech-docker-images/"
        - name: Import Docker Images
          loop: "{{Docker.Images.keys()}}"
          register: imageImports
          when: 
          - Docker.Images[item].build
          docker_image:
             name: "{{item}}"
             load_path: "{{ImageStorageDirectory}}/vpntech-docker-images/{{Docker.Images[item].archive}}"
             push: no
             buildargs:
               log_volume: /var/log/myapp
               listen_port: 8080
        - name: Pull Non existent Docker Images
          loop: "{{imageImports.results}}"
          debug: var=item


  - name: Update CentOS Docker Container
    when: Blocks.UpdateImages
    block:
        - name: "Updating Container Images :: Remove Image Containers"
          delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          docker_container:
            name: "{{item.name}}"
            state: absent
            purge_networks: yes

        - name: "Updating Container Images :: Create CentOS Container Images"
          delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          docker_container:
            name: "{{item.name}}"
            hostname: "{{item.hostname}}"
            image: "{{item.image}}"
            volumes: "{{item.volumes}}"
            privileged: "{{item.privileged}}"
            capabilities: "{{item.capabilities}}"
            recreate: yes
            detach: yes
            state: started
            pull: no
            auto_remove: no
            cleanup: no

        - name: "Updating Container Images :: Pausing to let Containers start"
          delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          loop: "{{Docker.Containers}}"
          run_once: yes
          pause: seconds=2

        - name: "Updating Container Images :: Collecting Container Used Bytes"
          delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: before_usedBytes
          shell: "docker exec {{item.name}} bash -l -c \"{{item.Commands._UsedBytes}}\""

        - name: Set beforeBytes
          run_once: yes
          set_fact:
            beforeBytes: "{{before_usedBytes.results[0].stdout|int}}"

        - name: Add the newly created container to the inventory
#          delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          loop: "{{Docker.Containers}}"
          add_host:
              name: "{{ item.name }}"
              ansible_connection: docker
              ansible_user: root
              #remote_addr: "{{item.name}}"
              ansible_ssh_host: "{{Docker.Images[item.imageTarball].templateServer}}"
              #ansible_python_interpreter: /usr/bin/python

#        - name: Gather Docker Container Facts
#          gather_facts: yes
#          conn
        - name: Debug Container Ifconfig
          debug: var=hostvars['centos']
        - name: test centos
          run_once: yes
          delegate_to: centos
          command: ifconfig
          register: i
        - debug: var=i
        - name: Run Command in Docker Container
          loop: "{{Docker.Containers}}"
          #connection: docker
          delegate_to: "{{item.name}}"
          #delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          #remote_host: "{{Docker.Images[item.imageTarball].templateServer}}"
          #connection: docker
          register: containerIfconfig
          command: ifconfig
#          delegate_to: "{{item.name}}"
#          run_once: yes

        - name: Debug Container Ifconfig
          debug: var=containerIfconfig

        - meta: end_play

        - name: "Updating Container Images :: Issue Container Image Update Commands"
          delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: updateOutput
          shell: "docker exec {{item.name}} bash -l -c \"{{item.Commands._Update}} {{item.Packages.Update|join(' ')}} && {{item.Commands._Install}} {{item.Packages.Present|join(' ')}} && {{item.Commands._Remove}} {{item.Packages.Absent|join(' ')}} && {{item.Commands._Pip_Install}} {{item.Pips.Present|join(' ')}} && {{item.Commands._Npm_Install}} {{item.Npms.Present|join(' ')}}\""

        - name: "Updating Container Images :: Collecting Container Used Bytes"
          delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
          run_once: yes
          loop: "{{Docker.Containers}}"
          register: after_usedBytes
          shell: "docker exec {{item.name}} bash -l -c \"{{item.Commands._UsedBytes}}\""

        - name: Set afterBytes
          run_once: yes
          set_fact:
            afterBytes: "{{after_usedBytes.results[0].stdout|int}}"

        - name: Set changedBytes
          run_once: yes
          set_fact:
            changedBytes: "{{afterBytes|int - beforeBytes|int}}"

        - name: check changedBytes
          run_once: yes
          debug: var=changedBytes

        - name: Set Update Policy
          run_once: yes
          set_fact:
                updatePolicy: "{{(changedBytes|int > CommitPolicy.MinimumChangedBytes|int) or CommitPolicy.Force}}"

        - name: check Update Policy
          run_once: yes
          debug: var=updatePolicy|bool

        - name: Updating Image Based on Update Policy
          when: updatePolicy|bool
          block:
                - name: "Updating Container Images :: Create Container Image Commit"
                  delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  command: "docker commit centos {{item.image}}:latest"

                - name: "Updating Container Images :: Create Container Image Tarballs"
                  delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  docker_image:
                     name: "{{item.image}}:latest"
                     archive_path: "{{ImageStorageDirectory}}/vpntech-docker-images/{{Docker.Images[item.imageTarball].archive}}"
                     push: no
                     repository: "{{item.image}}"

                - name: "Updating Container Images :: Fetch Container Image Tarballs"
                  delegate_to: "{{Docker.Images[item.imageTarball].templateServer}}"
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  fetch:
                    validate_checksum: no
                    src: "{{ImageStorageDirectory}}/vpntech-docker-images/{{Docker.Images[item.imageTarball].archive}}"
                    dest: ../dockerImages/vpntech-docker-images
                    flat: yes

                - name: "Updating Container Images :: Push Docker Image Tarballs to Repo"
                  when: Blocks.Commit
                  delegate_to: localhost
                  run_once: yes
                  loop: "{{Docker.Containers}}"
                  shell: "git add {{Docker.Images[item.imageTarball].archive}}; git commit {{Docker.Images[item.imageTarball].archive}} -m 'automatic docker image update from playbook' && git status | grep 'directory clean' || git push"
                  args:
                    chdir: ../dockerImages/vpntech-docker-images 
        

           
  - name: Create Docker Containers
    tags: containers
    when: Blocks.Containers
    block:
        - name: Create Test CentOS 7 Container
          loop: "{{Docker.Containers}}"
          register: testContainer
          docker_container:
              pull: no
              auto_remove: no
              cleanup: no
              detach: yes
              hostname: "{{item.hostname}}"
              name: "{{item.name}}"
              image: "{{item.image}}"
              state: "{{item.state}}"
              volumes: "{{item.volumes}}"
              privileged: "{{item.privileged}}"
              capabilities: "{{item.capabilities}}"
              ports: "{{item.ports}}"
              recreate: yes
              memory: 512M
              memory_swap: 1024M
              memory_reservation: 512M
        - name: Debug testContainer
          debug: var=testContainer
